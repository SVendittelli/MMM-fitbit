/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FitbitWebApiExplorer);
  }
}(this, function(expect, FitbitWebApiExplorer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FitbitWebApiExplorer.BodyAndWeightApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BodyAndWeightApi', function() {
    describe('addBodyFatLog', function() {
      it('should call addBodyFatLog successfully', function(done) {
        //uncomment below and update the code to test addBodyFatLog
        //instance.addBodyFatLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWeightLog', function() {
      it('should call addWeightLog successfully', function(done) {
        //uncomment below and update the code to test addWeightLog
        //instance.addWeightLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBodyFatLog', function() {
      it('should call deleteBodyFatLog successfully', function(done) {
        //uncomment below and update the code to test deleteBodyFatLog
        //instance.deleteBodyFatLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWeightLog', function() {
      it('should call deleteWeightLog successfully', function(done) {
        //uncomment below and update the code to test deleteWeightLog
        //instance.deleteWeightLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBodyFatByDate', function() {
      it('should call getBodyFatByDate successfully', function(done) {
        //uncomment below and update the code to test getBodyFatByDate
        //instance.getBodyFatByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBodyFatByDatePeriod', function() {
      it('should call getBodyFatByDatePeriod successfully', function(done) {
        //uncomment below and update the code to test getBodyFatByDatePeriod
        //instance.getBodyFatByDatePeriod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBodyFatByDateRange', function() {
      it('should call getBodyFatByDateRange successfully', function(done) {
        //uncomment below and update the code to test getBodyFatByDateRange
        //instance.getBodyFatByDateRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBodyGoals', function() {
      it('should call getBodyGoals successfully', function(done) {
        //uncomment below and update the code to test getBodyGoals
        //instance.getBodyGoals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWeightByDate', function() {
      it('should call getWeightByDate successfully', function(done) {
        //uncomment below and update the code to test getWeightByDate
        //instance.getWeightByDate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWeightByDatePeriod', function() {
      it('should call getWeightByDatePeriod successfully', function(done) {
        //uncomment below and update the code to test getWeightByDatePeriod
        //instance.getWeightByDatePeriod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWeightByDateRange', function() {
      it('should call getWeightByDateRange successfully', function(done) {
        //uncomment below and update the code to test getWeightByDateRange
        //instance.getWeightByDateRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBodyFatGoal', function() {
      it('should call updateBodyFatGoal successfully', function(done) {
        //uncomment below and update the code to test updateBodyFatGoal
        //instance.updateBodyFatGoal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWeightGoal', function() {
      it('should call updateWeightGoal successfully', function(done) {
        //uncomment below and update the code to test updateWeightGoal
        //instance.updateWeightGoal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));

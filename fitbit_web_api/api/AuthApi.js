/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Auth service.
* @module api/AuthApi
* @version 1
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the introspect operation.
     * @callback module:api/AuthApi~introspectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the active state of an OAuth 2.0 token
     * Retrieves the active state of an OAuth 2.0 token. It follows https://tools.ietf.org/html/rfc7662.
     * @param {String} token OAuth 2.0 token to retrieve the state of
     * @param {module:api/AuthApi~introspectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    introspect(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling introspect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'token': token
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.1/oauth2/introspect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oauthToken operation.
     * @callback module:api/AuthApi~oauthTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OAuth 2 access token
     * Retrieves an OAuth 2 access token.
     * @param {String} clientId This is your Fitbit API application id from your settings on dev.fitbit.com.
     * @param {String} grantType Authorization grant type. Valid values are 'authorization_code' and 'refresh_token'.
     * @param {Object} opts Optional parameters
     * @param {String} opts.authorization The Authorization header must be set to 'Basic' followed by a space, then the Base64 encoded string of your application's client id and secret concatenated with a colon. For example, 'Basic Y2xpZW50X2lkOmNsaWVudCBzZWNyZXQ='. The Base64 encoded string, 'Y2xpZW50X2lkOmNsaWVudCBzZWNyZXQ=', is decoded as 'client_id:client secret'.
     * @param {String} opts.code Authorization code received in the redirect as URI parameter. Required if using the Authorization Code flow.
     * @param {String} opts.expiresIn Specify the desired access token lifetime. Defaults to 28800 for 8 hours. The other valid value is 3600 for 1 hour.
     * @param {String} opts.redirectUri Uri to which the access token will be sent if the request is successful. Required if specified in the redirect to the authorization page. Must be exact match.
     * @param {String} opts.refreshToken Refresh token issued by Fitbit. Required if 'grant_type' is 'refresh_token'.
     * @param {String} opts.state Required if specified in the redirect uri of the authorization page. Must be an exact match.
     * @param {module:api/AuthApi~oauthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    oauthToken(clientId, grantType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling oauthToken");
      }
      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling oauthToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': opts['code'],
        'client_id': clientId,
        'expires_in': opts['expiresIn'],
        'grant_type': grantType,
        'redirect_uri': opts['redirectUri'],
        'refresh_token': opts['refreshToken'],
        'state': opts['state']
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth2/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

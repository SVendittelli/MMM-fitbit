/**
 * Fitbit Web API Explorer
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Sleep service.
* @module api/SleepApi
* @version 1
*/
export default class SleepApi {

    /**
    * Constructs a new SleepApi. 
    * @alias module:api/SleepApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSleep operation.
     * @callback module:api/SleepApi~addSleepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log Sleep
     * Creates a log entry for a sleep event and returns a response in the format requested.
     * @param {String} startTime Start time includes hours and minutes in the format HH:mm.
     * @param {Number} duration Duration in milliseconds.
     * @param {Date} date Log entry in the format yyyy-MM-dd.
     * @param {module:api/SleepApi~addSleepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addSleep(startTime, duration, date, callback) {
      let postBody = null;
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling addSleep");
      }
      // verify the required parameter 'duration' is set
      if (duration === undefined || duration === null) {
        throw new Error("Missing the required parameter 'duration' when calling addSleep");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling addSleep");
      }

      let pathParams = {
      };
      let queryParams = {
        'startTime': startTime,
        'duration': duration,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.2/user/-/sleep.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSleep operation.
     * @callback module:api/SleepApi~deleteSleepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Sleep Log
     * Deletes a user's sleep log entry with the given ID.
     * @param {String} logId The ID of the sleep log to be deleted.
     * @param {module:api/SleepApi~deleteSleepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSleep(logId, callback) {
      let postBody = null;
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling deleteSleep");
      }

      let pathParams = {
        'log-id': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.2/user/-/sleep/{log-id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSleepByDate operation.
     * @callback module:api/SleepApi~getSleepByDateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sleep Log
     * The Get Sleep Logs by Date endpoint returns a summary and list of a user's sleep log entries (including naps) as well as detailed sleep entry data for a given day.
     * @param {Date} date The date of records to be returned. In the format yyyy-MM-dd.
     * @param {module:api/SleepApi~getSleepByDateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSleepByDate(date, callback) {
      let postBody = null;
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getSleepByDate");
      }

      let pathParams = {
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.2/user/-/sleep/date/{date}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSleepByDateRange operation.
     * @callback module:api/SleepApi~getSleepByDateRangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sleep Logs by Date Range
     * The Get Sleep Logs by Date Range endpoint returns a list of a user's sleep log entries (including naps) as well as detailed sleep entry data for a given date range (inclusive of start and end dates).
     * @param {Date} baseDate The date of records to be returned. In the format yyyy-MM-dd.
     * @param {Date} endDate The date of records to be returned. In the format yyyy-MM-dd.
     * @param {module:api/SleepApi~getSleepByDateRangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSleepByDateRange(baseDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'baseDate' is set
      if (baseDate === undefined || baseDate === null) {
        throw new Error("Missing the required parameter 'baseDate' when calling getSleepByDateRange");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getSleepByDateRange");
      }

      let pathParams = {
        'base-date': baseDate,
        'end-date': endDate
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.2/user/-/sleep/date/{base-date}/{end-date}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSleepGoal operation.
     * @callback module:api/SleepApi~getSleepGoalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sleep Goal
     * Returns the user's sleep goal.
     * @param {module:api/SleepApi~getSleepGoalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSleepGoal(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.2/user/-/sleep/goal.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSleepList operation.
     * @callback module:api/SleepApi~getSleepListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sleep Logs List
     * The Get Sleep Logs List endpoint returns a list of a user's sleep logs (including naps) before or after a given day with offset, limit, and sort order.
     * @param {String} sort The sort order of entries by date asc (ascending) or desc (descending).
     * @param {Number} offset The offset number of entries.
     * @param {Number} limit The maximum number of entries returned (maximum;100).
     * @param {Object} opts Optional parameters
     * @param {Date} opts.beforeDate The date in the format yyyy-MM-ddTHH:mm:ss. Only yyyy-MM-dd is required. Either beforeDate or afterDate should be specified.
     * @param {Date} opts.afterDate The date in the format yyyy-MM-ddTHH:mm:ss.
     * @param {module:api/SleepApi~getSleepListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSleepList(sort, offset, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling getSleepList");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getSleepList");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getSleepList");
      }

      let pathParams = {
      };
      let queryParams = {
        'beforeDate': opts['beforeDate'],
        'afterDate': opts['afterDate'],
        'sort': sort,
        'offset': offset,
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.2/user/-/sleep/list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSleepGoal operation.
     * @callback module:api/SleepApi~updateSleepGoalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sleep Goal
     * Create or update the user's sleep goal and get a response in the JSON format.
     * @param {String} minDuration Duration of sleep goal.
     * @param {module:api/SleepApi~updateSleepGoalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSleepGoal(minDuration, callback) {
      let postBody = null;
      // verify the required parameter 'minDuration' is set
      if (minDuration === undefined || minDuration === null) {
        throw new Error("Missing the required parameter 'minDuration' when calling updateSleepGoal");
      }

      let pathParams = {
      };
      let queryParams = {
        'minDuration': minDuration
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1.2/user/-/sleep/goal.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
